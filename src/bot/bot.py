"""Bot that trades on Oanda."""

from dataclasses import dataclass
from datetime import datetime, timedelta
import logging
from time import sleep
import uuid
import v20  # type: ignore
import pandas as pd

from bot.backtest import ChartConfig, PerfTimer, SignalConfig
from core.kernel import KernelConfig, kernel
from bot.reporting import report
from bot.exchange import (
    close_trade,
    get_open_trade,
    getOandaOHLC,
    place_order,
    OandaContext,
)

logger = logging.getLogger("bot")
APP_START_TIME = datetime.now()
FRIDAY = 5
SUNDAY = 7
FIVE_PM = 21
HALF_MINUTE = 30


@dataclass
class TradeConfig:
    """Configuration for the bot."""

    amount: float
    bot_id: uuid.UUID


def bot_run(
    ctx: OandaContext,
    signal_conf: SignalConfig,
    chart_conf: ChartConfig,
    trade_conf: TradeConfig,
) -> tuple[int, pd.DataFrame | None, Exception | None]:
    """Run the bot."""
    # get open trades and candles
    try:
        trade_id = get_open_trade(ctx, trade_conf.bot_id)
        df = getOandaOHLC(
            ctx, count=chart_conf.candle_count, granularity=chart_conf.granularity
        )
    except Exception as err:
        return -1, None, err

    # run kernel on candles
    df = kernel(
        df,
        include_incomplete=False,
        config=KernelConfig(
            signal_buy_column=signal_conf.signal_buy_column,
            signal_exit_column=signal_conf.signal_exit_column,
            source_column=signal_conf.source_column,
            wma_period=chart_conf.wma_period,
            stop_loss=signal_conf.stop_loss,
            take_profit=signal_conf.take_profit,
        ),
    )

    # get the current time
    recent_last_time = datetime.fromisoformat(df.iloc[-1]["timestamp"])
    current_time = datetime.now(tz=recent_last_time.tzinfo).replace(
        second=0, microsecond=0
    )

    # check if the current time is a 5 minute interval
    if trade_id == -1 and current_time.minute % 5 != 0:
        return trade_id, df, None

    # check if the current time is greater than the recent last time
    if (current_time - recent_last_time).total_seconds() > HALF_MINUTE:
        return trade_id, df, Exception(f"curr:{current_time} last:{recent_last_time}")

    # place order
    rec = df.iloc[-1]
    if rec.trigger == 1 and trade_id == -1:
        try:
            trade_id = place_order(
                ctx,
                trade_conf.amount,
                trade_conf.bot_id,
            )
        except Exception as err:
            return trade_id, df, err
    # close order
    elif (rec.trigger == -1 and trade_id != -1) or (
        rec.trigger == 0 and rec.signal == 0 and trade_id != -1
    ):
        try:
            close_trade(ctx, trade_id)
        except Exception as err:
            return trade_id, df, err

    return trade_id, df, None


def bot(
    token: str,
    account_id: str,
    chart_conf: ChartConfig,
    signal_conf: SignalConfig,
    trade_conf: TradeConfig,
) -> None:
    """Bot that trades on Oanda.

    This function trades on Oanda using the Oanda API. It places market orders based on the
    trading signals generated by the kernel function.  It closes the trade when the trigger is -1.

    Parameters
    ----------
    token : str
        The Oanda API token.
    account_id : str
        The Oanda account ID.
    chart_conf : ChartConfig
        The chart configuration.
    signal_conf : SignalConfig
        The signal configuration.
    trade_conf : TradeConfig
        The trade configuration.

    """
    logger.info("starting bot.")

    # create Oanda context
    ctx = OandaContext(
        ctx=v20.Context("api-fxpractice.oanda.com", token=token),
        account_id=account_id,
        token=token,
        instrument=chart_conf.instrument,
    )

    # run bot
    trade_id: int = -1
    df: pd.DataFrame | None = None
    err: Exception | None = None
    while True:
        with PerfTimer(APP_START_TIME, logger):
            trade_id, df, err = bot_run(
                ctx,
                signal_conf,
                chart_conf=chart_conf,
                trade_conf=trade_conf,
            )

        if err is not None:
            logger.error(err)
            sleep(2)
            continue

        logger.info(f"columns used: {signal_conf}")
        logger.info(f"trade id: {trade_id}")
        logger.info(f"run complete. {trade_conf.bot_id}")

        # print the results
        if df is not None:
            report(
                df,
                chart_conf.instrument,
                signal_conf.signal_buy_column,
                signal_conf.signal_exit_column,
            )

        sleep_until_next_5_minute(trade_id=trade_id)


def roundUp(dt):
    """Round a datetime object to the next 5 minute interval."""
    return (dt + timedelta(minutes=5 - dt.minute % 5)).replace(second=1, microsecond=0)


def sleep_until_next_5_minute(trade_id: int = -1):
    """Sleep until the next 5 minute interval."""
    now = datetime.now()
    next_time = roundUp(now)
    if (next_time - now) < timedelta(seconds=1):
        next_time = next_time + timedelta(minutes=5)
    logger.info(
        "sleeping until next 5 minute interval %s",
        next_time.strftime("%Y-%m-%d %H:%M:%S.%f")[:-3],
    )
    sleep((next_time - now).total_seconds())
